@using EGuidebook.Models
@using EGuidebook.Shared
@model SpotViewModel
@{
    ViewBag.Title = "Edycja miejsca";
    ViewBag.IconClass = "fa fa-map-marker";
    Layout = Helper.AdminLayoutPath;
    ViewBag.MenuItem = Helper.EnumSelectedMenuItem.SPOTS;

    ApplicationDbContext objApplicationDbContext = new ApplicationDbContext();
    List<SpotCategoryModel> listSpotCategoryModel = objApplicationDbContext.SpotCategories.ToList();
}

<style>
    .row {
        padding-bottom: 10px;
    }

    .spot-photo {
        width: 100px;
        height: 100px;
        margin-right: 10px;
        border-radius: 5px;
        padding: 5px;
        border: 1px solid #CCC;
    }

    #ul-spot-images li:hover .spot-photo-delete {
        display: block;
    }

    .spot-photo-delete {
        position: absolute;
        left: 0;
        top: 0;
        padding: 24px;
        border-radius: 5px;
        width: 100px;
        height: 100px;
        display: none;
        cursor: pointer;
    }

    #ul-spot-images {
        list-style-type: none;
        padding: 0;
    }

    #ul-spot-images li {
        float: left;
        position: relative;
    }

    .tab-pane {
        padding: 10px;
        padding-top: 30px;
    }

    .nav-pills li:not(.active) a {
        border: 1px solid #CCC;
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMl-z3rt9slZ-qdrbfDYd7HXlCvxWq1TY&libraries=places&callback=initMap"></script>

@section scripts {
 <script>
     var map = null;
     var geocoder = null;
     function initMap(reloadAutocomplete) {
         var divMap = document.getElementById('map');

         if (divMap == null) {
             setTimeout(initMap, 100);
             return;
         }

         var uluru = { lat: @(Model.CoorX.ToString()), lng: @(Model.CoorY.ToString()) };

         geocoder = new google.maps.Geocoder();
         map = new google.maps.Map(divMap, {
             zoom: 16,
             center: uluru
         });
         var marker = new google.maps.Marker({
             map: map,
             position: uluru,
             icon: '/Content/assets/img/map-pin.png'
         });

         if (reloadAutocomplete == undefined || reloadAutocomplete) {
             initAutocomplete();
         }
     }

     function findOnMap(address) {
         geocoder.geocode({ 'address': address = address }, function (results, status) {
             if (status == google.maps.GeocoderStatus.OK) {
                 map.setCenter(results[0].geometry.location);
                 jQuery('#CoorX').val(results[0].geometry.location.lat().toFixed(7));
                 jQuery('#CoorY').val(results[0].geometry.location.lng().toFixed(7));
                 var marker = new google.maps.Marker({
                     map: map,
                     position: results[0].geometry.location,
                     icon: '/Content/assets/img/map-pin.png'
                 });
             }
         });
     }

     var placeSearch, autocomplete;
     var componentForm = {
         street_number: 'short_name',
         route: 'long_name',
         locality: 'long_name',
         administrative_area_level_1: 'short_name',
         country: 'long_name',
         postal_code: 'short_name'
     };

     function initAutocomplete() {
         autocomplete = new google.maps.places.Autocomplete(
             (document.getElementById('txtSpotAddress')),
             { types: ['geocode'] });
         autocomplete.addListener('place_changed', fillInAddress);
     }

     function fillInAddress() {
         var place = autocomplete.getPlace();

         var street = '';
         var street_number = '';
         var city = '';

         for (var i = 0; i < place.address_components.length; i++) {
             var addressType = place.address_components[i].types[0];
             var value = place.address_components[i][componentForm[addressType]];

             if (addressType == 'street_number') {
                 street_number = value;
             }             
             else if (addressType == 'route') {
                 street = value;
             }             
             else if (addressType == 'locality') {
                 city = value;
             }             
         }

         findOnMap(street + ' ' + street_number + ' ' + city)
     }

     var $currentImg = null;
     function openUploader() {
         var i = 1;
         jQuery('.spot-photo').each(function () {
             var isPhotoLoaded = jQuery(this).attr('data-loaded') != undefined && jQuery(this).attr('data-loaded') == 'true';
             if (!isPhotoLoaded) {
                 jQuery('input[type=file][id="Image' + i + '"]').click();
                 $currentImg = jQuery(this);
                 return false;
             }
             i++;
         });
     }

     function setUploadedPhoto(e) {
         $currentImg
             .attr('data-loaded', 'true')
             .attr('src', URL.createObjectURL(e.target.files[0]));
     }

     function deletePhoto($deleteImg, index) {
         var $imgToClean = $deleteImg.parent().find('.spot-photo');
         $imgToClean
             .removeAttr('data-loaded')
             .attr('src', '@Helper.NoPhotoImgPath');
         jQuery('input[type=file][id="Image' + (index + 1) + '"]').val('');
         jQuery('#hfImagePath' + (index + 1)).val('');
     }

     function createHoursSelector(selector, secondPickerSelector) {
         jQuery(selector).datetimepicker({
             format: 'HH:mm',             
             ignoreReadonly: true,
             icons: {
                 up: 'fa fa-angle-up',
                 down: 'fa fa-angle-down'
             }
         });

         jQuery(secondPickerSelector).datetimepicker({
             format: 'HH:mm',
             useCurrent: false,
             ignoreReadonly: true,
             icons: {
                 up: 'fa fa-angle-up',
                 down: 'fa fa-angle-down'
             }
         });

         jQuery(selector).on("dp.change", function (e) {
             jQuery(secondPickerSelector).data("DateTimePicker").minDate(e.date);
         });
         jQuery(secondPickerSelector).on("dp.change", function (e) {
             jQuery(selector).data("DateTimePicker").maxDate(e.date);
         });
     }

     function createCurrencyTouchSpin(selector) {
         jQuery(selector).TouchSpin({
             min: 0.00,
             max: 999999999.00,
             step: 0.01,
             decimals: 2,
             postfix: 'zł'
         });
     }

     jQuery(document).ready(function () {
         jQuery('#form-edit-spot').validate().settings.ignore = '.ignore';
         jQuery('.spot-image-upload').on('change', setUploadedPhoto);
         jQuery('#btnAddPhoto').on('click', openUploader);
         jQuery('.spot-photo-delete').each(function (index) {
             jQuery(this).on('click', function () {
                 deletePhoto(jQuery(this), index);
             });
         });
         jQuery('#txtSpotAddress').keyup(function (event) {
             if (event.keyCode == 13) {
                 findOnMap();
             }
         });

         jQuery(document).on('keypress', 'form', function (e) {
             return e.keyCode != 13;
         });

         jQuery('.nav-pills a').eq(1).on('shown.bs.tab', function () {             
             initMap(false);
         });
         
         createHoursSelector('#divOpeningHours_MondayFrom', '#divOpeningHours_MondayTo');
         createHoursSelector('#divOpeningHours_TuesdayFrom', '#divOpeningHours_TuesdayTo');
         createHoursSelector('#divOpeningHours_WednesdayFrom', '#divOpeningHours_WednesdayTo');
         createHoursSelector('#divOpeningHours_ThursdayFrom', '#divOpeningHours_ThursdayTo');
         createHoursSelector('#divOpeningHours_FridayFrom', '#divOpeningHours_FridayTo');
         createHoursSelector('#divOpeningHours_SaturdayFrom', '#divOpeningHours_SaturdayTo');
         createHoursSelector('#divOpeningHours_SundayFrom', '#divOpeningHours_SundayTo');

         createCurrencyTouchSpin('#txtTicketAdultPrice');
         createCurrencyTouchSpin('#txtTicketStudentPrice');
         createCurrencyTouchSpin('#txtTicketKidsPrice');
     });
</script>
}

@using (Html.BeginForm("Edit", "Spot", FormMethod.Post, new { @id = "form-edit-spot", @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.TextBoxFor(x => x.Image1, new { @type = "file", @class = "spot-image-upload", @style = "display: none;" })
    @Html.TextBoxFor(x => x.Image2, new { @type = "file", @class = "spot-image-upload", @style = "display: none;" })
    @Html.TextBoxFor(x => x.Image3, new { @type = "file", @class = "spot-image-upload", @style = "display: none;" })
    @Html.TextBoxFor(x => x.Image4, new { @type = "file", @class = "spot-image-upload", @style = "display: none;" })
    @Html.TextBoxFor(x => x.Image5, new { @type = "file", @class = "spot-image-upload", @style = "display: none;" })
    @Html.HiddenFor(x => x.Image1Path, new { @id = "hfImagePath1" });
    @Html.HiddenFor(x => x.Image2Path, new { @id = "hfImagePath2" });
    @Html.HiddenFor(x => x.Image3Path, new { @id = "hfImagePath3" });
    @Html.HiddenFor(x => x.Image4Path, new { @id = "hfImagePath4" });
    @Html.HiddenFor(x => x.Image5Path, new { @id = "hfImagePath5" });

    <ul class="nav nav-pills">
        <li class="active"><a data-toggle="tab" href="#general">Dane podstawowe</a></li>        
        <li><a data-toggle="tab" href="#localisation">Lokalizacja</a></li>
        <li><a data-toggle="tab" href="#extra-info">Informacje dodatkowe</a></li>
        <li><a data-toggle="tab" href="#grades">Oceny (@Model.Grades.Count)</a></li>
    </ul>

    <div class="tab-content">
        <div id="general" class="tab-pane fade in active">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.Name)
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Name, "", new { @class = "error-msg" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.Description)
                </div>
                <div class="col-md-10">
                    @Html.TextAreaFor(x => x.Description, new { @class = "form-control", @style = "resize: none; height: 100px;" })
                    @Html.ValidationMessageFor(x => x.Description, "", new { @class = "error-msg" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.Image1)
                </div>
                <div class="col-md-10">
                    <ul id="ul-spot-images">
                        <li>
                            <img class="spot-photo-delete" src="~/Content/assets/img/x-icon.png" />
                            <img class="spot-photo" data-loaded="@Helper.CheckIfFileExists(Model.Image1Path).ToString().ToLower()" src="@(Helper.CheckIfFileExists(Model.Image1Path) ? Model.Image1Path : Helper.NoPhotoImgPath)" />
                        </li>
                        <li>
                            <img class="spot-photo-delete" src="~/Content/assets/img/x-icon.png" />
                            <img class="spot-photo" data-loaded="@Helper.CheckIfFileExists(Model.Image2Path).ToString().ToLower()" src="@(Helper.CheckIfFileExists(Model.Image2Path) ? Model.Image2Path : Helper.NoPhotoImgPath)" />
                        </li>
                        <li>
                            <img class="spot-photo-delete" src="~/Content/assets/img/x-icon.png" />
                            <img class="spot-photo" data-loaded="@Helper.CheckIfFileExists(Model.Image3Path).ToString().ToLower()" src="@(Helper.CheckIfFileExists(Model.Image3Path) ? Model.Image3Path : Helper.NoPhotoImgPath)" />
                        </li>
                        <li>
                            <img class="spot-photo-delete" src="~/Content/assets/img/x-icon.png" />
                            <img class="spot-photo" data-loaded="@Helper.CheckIfFileExists(Model.Image4Path).ToString().ToLower()" src="@(Helper.CheckIfFileExists(Model.Image4Path) ? Model.Image4Path : Helper.NoPhotoImgPath)" />
                        </li>
                        <li>
                            <img class="spot-photo-delete" src="~/Content/assets/img/x-icon.png" />
                            <img class="spot-photo" data-loaded="@Helper.CheckIfFileExists(Model.Image5Path).ToString().ToLower()" src="@(Helper.CheckIfFileExists(Model.Image5Path) ? Model.Image5Path : Helper.NoPhotoImgPath)" />
                        </li>
                    </ul>
                    <a id="btnAddPhoto" class="btn btn-primary btn-md" style="margin-top: 54px;"><i class="fa fa-image"></i>&nbsp;Dodaj zdjęcie</a>
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.SpotCategoryId)
                </div>
                <div class="col-md-10">
                    <select name="@Html.NameFor(x => x.SpotCategoryId)" class="selectpicker">
                        @{ 
                            foreach(var category in listSpotCategoryModel)
                            {
                                string strIconPath = Helper.CheckIfFileExists(category.IconPath) ? category.IconPath : Helper.NoPhotoImgPath;
                                bool bIsSelected = category.SpotCategoryId.ToString().Equals(Model.SpotCategoryId);
                                <option data-content="<img style='width: 14px; height: 14px;' src='@strIconPath'/>&nbsp;@category.Name" value="@category.SpotCategoryId.ToString()" @(bIsSelected ? "selected" : "")></option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>        

        <div id="localisation" class="tab-pane fade in">
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <div id="map" style="height: 400px; width: 100%;"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <input id="txtSpotAddress" type="text" class="form-control" placeholder="Adres miejsca">
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.CoorX)
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.CoorX, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CoorX, "", new { @class = "error-msg" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(x => x.CoorY)
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.CoorY, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CoorY, "", new { @class = "error-msg" })
                </div>
            </div>
        </div>
        <div id="extra-info" class="tab-pane fade in">
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#opening-hours">
                                <i class="fa fa-clock-o"></i>&nbsp;Godziny otwarcia
                            </a>
                        </h4>
                    </div>
                    <div id="opening-hours" class="panel-collapse collapse">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Poniedziałek:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_MondayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_MondayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_MondayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_MondayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_MondayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_MondayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Wtorek:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_TuesdayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_TuesdayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_TuesdayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_TuesdayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_TuesdayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_TuesdayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Środa:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_WednesdayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_WednesdayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_WednesdayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_WednesdayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_WednesdayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_WednesdayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Czwartek:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_ThursdayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_ThursdayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_ThursdayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_ThursdayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_ThursdayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_ThursdayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Piątek:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_FridayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_FridayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_FridayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_FridayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_FridayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_FridayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Sobota:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_SaturdayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_SaturdayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_SaturdayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_SaturdayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_SaturdayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_SaturdayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-top: 5px;">
                                    Niedziela:
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_SundayFrom'>
                                            @Html.TextBoxFor(x => x.OpeningHours_SundayFrom, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_SundayFrom, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <div class='input-group date' id='divOpeningHours_SundayTo'>
                                            @Html.TextBoxFor(x => x.OpeningHours_SundayTo, new { @class = "form-control", @readonly = "readonly" })
                                            <span class="input-group-addon">
                                                <span class="fa fa-clock-o"></span>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.OpeningHours_SundayTo, "", new { @class = "error-msg" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#ticket-price">
                                <i class="fa fa-dollar"></i>&nbsp;Ceny biletów
                            </a>
                        </h4>
                    </div>
                    <div id="ticket-price" class="panel-collapse collapse" style="padding-left: 20px; padding-top: 10px;">
                        <div class="row">
                            <div class="col-md-2">
                                @Html.DisplayNameFor(x => x.TicketAdultPrice)
                            </div>
                            <div class="col-md-2">
                                @Html.TextBoxFor(x => x.TicketAdultPrice, new { @id = "txtTicketAdultPrice", @class = "form-control" })
                                @Html.ValidationMessageFor(x => x.TicketAdultPrice, "", new { @class = "error-msg" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                @Html.DisplayNameFor(x => x.TicketStudentPrice)
                            </div>
                            <div class="col-md-2">
                                @Html.TextBoxFor(x => x.TicketStudentPrice, new { @id = "txtTicketStudentPrice", @class = "form-control" })
                                @Html.ValidationMessageFor(x => x.TicketStudentPrice, "", new { @class = "error-msg" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                @Html.DisplayNameFor(x => x.TicketKidsPrice)
                            </div>
                            <div class="col-md-2">
                                @Html.TextBoxFor(x => x.TicketKidsPrice, new { @id = "txtTicketKidsPrice", @class = "form-control" })
                                @Html.ValidationMessageFor(x => x.TicketKidsPrice, "", new { @class = "error-msg" })
                            </div>
                        </div>
                    </div>
                </div>
            </div> 
        </div>
        <div id="grades" class="tab-pane fade in">
            @foreach(var grade in Model.Grades)
            {
                <div class="row" style="border-bottom: 1px solid #CCC;">
                    <div class="col-md-12" style="padding-top: 10px;">
                        <img src="@(Helper.YellowStarImgPath)" style="width: 22px; height: 22px;" />
                        <img src="@(grade.Grade >= 2 ? Helper.YellowStarImgPath : Helper.EmptyStarImgPath)" style="width: 22px; height: 22px;" />
                        <img src="@(grade.Grade >= 3 ? Helper.YellowStarImgPath : Helper.EmptyStarImgPath)" style="width: 22px; height: 22px;" />
                        <img src="@(grade.Grade >= 4 ? Helper.YellowStarImgPath : Helper.EmptyStarImgPath)" style="width: 22px; height: 22px;" />
                        <img src="@(grade.Grade >= 5 ? Helper.YellowStarImgPath : Helper.EmptyStarImgPath)" style="width: 22px; height: 22px;" />
                        <br/>
                        <div style="padding-left: 4px;">
                            Użytkownik&nbsp;<b>@(grade.User.Username)</b> w dniu <b>@(grade.CreationDate.ToString(new System.Globalization.CultureInfo("pl-PL")))</b>&nbsp;
                            wystawił ocenę dla tego miejsca: <b>@(grade.Grade.ToString())</b>
                            <br /><b>Dodatkowa treść:</b>
                            <br />@(string.IsNullOrEmpty(grade.Message) ? "---" : grade.Message)
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">    
            <button type="submit" class="btn btn-warning btn-md pull-right" style="min-width: 80px;">
                <i class="fa fa-plus"></i>&nbsp;Zapisz
            </button>
            @{
                if (!Model.IsApproved)
                {
                    <button type="button" class="btn btn-primary btn-md pull-right" style="min-width: 80px; margin-right: 10px;" onclick="jQuery('#form-approve-spot').submit()">
                        <i class="fa fa-check"></i>&nbsp;Zatwierdź
                    </button>
                }
            }                        
        </div>
    </div>
}

@using (Html.BeginForm("Approve", "Spot", FormMethod.Post, new { @id = "form-approve-spot" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.SpotID)
}