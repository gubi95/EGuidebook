@using EGuidebook.Shared
@using EGuidebook.Models
@using Newtonsoft.Json
@model RouteViewModel
@{
    Layout = Helper.AdminLayoutPath;
    ViewBag.Title = "Edycja trasy";
    ViewBag.IconClass = "fa fa-road";
    ViewBag.MenuItem = Helper.EnumSelectedMenuItem.ROUTES;
}

@section scripts {
    <script>
        var arrSpots = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.ApplicationSpots)))');

        jQuery(document).ready(function () {
            jQuery('#hf-spot-id-list').val('');
            jQuery("#spots-sortable").sortable({
                stop: function () {
                    repairSpotOrderList();
                    buildSpotsListFormatted();
                }
            });
            jQuery("#spots-sortable").disableSelection();
        });

        var map = null;
        var geocoder = null;
        var infoWindow = null;
        var routePath = null;

        function initMap(reloadAutocomplete) {
            var divMap = document.getElementById('map');

            if (divMap == null) {
                setTimeout(initMap, 100);
                return;
            }

            var uluru = { lat: 51.9908627, lng: 19.4516549 };
            geocoder = new google.maps.Geocoder();
            map = new google.maps.Map(divMap, {
                zoom: 6,
                center: uluru
            });

            infoWindow = new google.maps.InfoWindow();

            for (i = 0; i < arrSpots.length; i++) {
                var position = new google.maps.LatLng(arrSpots[i].CoorX, arrSpots[i].CoorY);
                marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    icon: '/Content/assets/img/map-pin.png'
                });

                google.maps.event.addListener(marker, 'click', (function (marker, spot_id, spot_name, spot_description, arr_image_paths) {
                    return function () {
                        var infoWindowContent =
                            '<div class="info_content">' +
                            '<h3>' + spot_name + '</h3>' +
                            '<p>' + spot_description + '</p>';

                        for (var j = 0; j < arr_image_paths.length; j++) {
                            if (arr_image_paths[j] == '') {
                                break;
                            }

                            infoWindowContent += '<img src="' + arr_image_paths[j] + '" style="width: 40px; height: 40px; margin-right: 5px;" />';
                        }

                        if (isSpotInList(spot_id)) {
                            infoWindowContent += '<br/><br/><a class="btn btn-danger btn-sm" data-is-in-list="true" onclick="toogleSpotInList(this, \'' + spot_id + '\')"><i class="fa fa-trash"></i>&nbsp;Usuń</a>'
                        }
                        else {
                            infoWindowContent += '<br/><br/><a class="btn btn-primary btn-sm" data-is-in-list="false" onclick="toogleSpotInList(this, \'' + spot_id + '\')"><i class="fa fa-plus"></i>&nbsp;Dodaj</a>'
                        }

                        infoWindowContent += '</div>';
                        infoWindow.setContent(infoWindowContent);
                        infoWindow.open(map, marker);
                    }
                })(marker, arrSpots[i].SpotID, arrSpots[i].Name, arrSpots[i].Description, arrSpots[i].ImagePaths));
            }

            initSpotMap();
        }

        function initSpotMap() {
            var spotIDs = '@("" + Model.SpotsIDsListFormatted)'.split(',').filter(Boolean);
            for (var i = 0; i < spotIDs.length; i++) {
                addSpotToList(spotIDs[i]);
            }
        }

        function toogleSpotInList(button, spotID) {
            var $button = jQuery(button);
            var isInList = $button.attr('data-is-in-list') == 'true';

            if (isInList) {
                removeSpotFromList(spotID);
                $button
                    .attr('class', 'btn btn-primary btn-sm')
                    .attr('data-is-in-list', 'false')
                    .html('<i class="fa fa-plus"></i>&nbsp;Dodaj');
            }
            else {
                addSpotToList(spotID);
                $button
                    .attr('class', 'btn btn-danger btn-sm')
                    .attr('data-is-in-list', 'true')
                    .html('<i class="fa fa-trash"></i>&nbsp;Usuń');
            }
        }

        function getSpotByID(spotID) {
            if (arrSpots == null) {
                return null;
            }

            for (var i = 0; i < arrSpots.length; i++) {
                if (arrSpots[i].SpotID == spotID) {
                    return arrSpots[i];
                }
            }

            return null;
        }

        function addSpotToList(spotID) {
            addSpotToGUIList(getSpotByID(spotID));
            buildSpotsListFormatted();
            closeInfoWindow();
            buildRoutePath();
        }

        function removeSpotFromList(spotID) {
            removeSpotFromGUIList(spotID);
            buildSpotsListFormatted();
            closeInfoWindow();
            buildRoutePath();
        }

        function closeInfoWindow() {
            if (infoWindow != null) {
                try {
                    infoWindow.close();
                }
                catch (exc) { }
            }
        }

        function isSpotInList(spotID) {
            var currentValue = jQuery('#hf-spot-id-list').val();
            var arrSpotIDs = currentValue.split(',').filter(Boolean);
            for (var i = 0; i < arrSpotIDs.length; i++) {
                if (arrSpotIDs[i] == spotID) {
                    return true;
                }
            }
            return false;
        }

        function repairSpotOrderList() {
            jQuery('.spot-order-number').each(function (i) {
                jQuery(this).html((++i) + '.');
            });
            jQuery('#spots-sortable').sortable('refresh');
        }

        function buildSpotsListFormatted() {
            var arrSpotIDs = [];
            jQuery('#spots-sortable li').each(function () {
                arrSpotIDs.push(jQuery(this).attr('data-spot-id'));
            });
            jQuery('#hf-spot-id-list').val(arrSpotIDs.join(','));
        }

        function addSpotToGUIList(spot) {
            var orderNumber = jQuery('.row-selected-spot').length + 1;

            var rowHtml =
                '<li class="li-selected-spot" data-spot-id="' + spot.SpotID + '">' +
                    '<div class="row row-selected-spot"><div class="col-md-8" style="padding-top: 4px; font-size: 16px;">' +
                '<b><span class="spot-order-number">' + orderNumber + '.</span>&nbsp;' + spot.Name + '</b>' +
                '</div>' +
                '<div class="col-md-4">' +
                '<a class="btn btn-danger btn-sm" style="float: right;" onclick="removeSpotFromList(\'' + spot.SpotID + '\')"><i class="fa fa-trash"></i>&nbsp;Usuń</a>' +
                '</div></div>' +
                '</li>';

            jQuery('#spots-sortable').append(rowHtml);

            repairSpotOrderList();
        }

        function removeSpotFromGUIList(spotID) {
            jQuery('#spots-sortable li[data-spot-id="' + spotID + '"]').remove();
            repairSpotOrderList();
        }

        function buildRoutePath() {
            var path = [];
            var currentValue = jQuery('#hf-spot-id-list').val();
            var arrSpotIDs = currentValue.split(',').filter(Boolean);
            for (var i = 0; i < arrSpotIDs.length; i++) {
                var spot = getSpotByID(arrSpotIDs[i]);
                if (spot != null) {
                    path.push({
                        lat: spot.CoorX,
                        lng: spot.CoorY
                    });
                }
            }

            if (routePath != null) {
                routePath.setMap(null);
                jQuery('#span-current-route-distance').html('');
            }

            if (path.length >= 2) {
                var pathDistance = 0;
                for (var j = 0; j < path.length - 1; j++) {
                    pathDistance += google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(path[j].lat, path[j].lng), new google.maps.LatLng(path[j + 1].lat, path[j + 1].lng));
                }

                pathDistance = ((pathDistance / 1000).toFixed(1) + ' km').replace('.', ',');

                jQuery('#span-current-route-distance').html('&nbsp;-&nbsp;' + pathDistance);

                routePath = new google.maps.Polyline({
                    path: path,
                    geodesic: true,
                    strokeColor: '#FF0000',
                    strokeOpacity: 1.0,
                    strokeWeight: 2
                });

                routePath.setMap(map);
            }
        }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMl-z3rt9slZ-qdrbfDYd7HXlCvxWq1TY&libraries=geometry,places&callback=initMap"></script>
}

<style>
    .row-selected-spot {
        padding-top: 10px;
        padding-bottom: 10px;
        padding-left: 10px;
        max-width: 650px;
        width: 100%;
        overflow: hidden;
        border-radius: 5px;
        border: 1px solid #CCCCCC;
        margin-bottom: 5px;
        margin-left: 10px;
        cursor: pointer;
    }
</style>

@using (Html.BeginForm("Edit", "Route", FormMethod.Post))
{
    @Html.HiddenFor(x => x.SpotsIDsListFormatted, new { @id = "hf-spot-id-list" })
    <div class="row" style="padding-bottom: 10px;">
        <div class="col-md-12">
            @Html.LabelFor(x => x.Name)
            @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Name, "", new { @class = "error-msg" })
        </div>
    </div>
    <div class="row" style="padding-bottom: 10px;">
        <div class="col-md-12">
            @Html.LabelFor(x => x.Description)
            @Html.TextAreaFor(x => x.Description, new { @class = "form-control", @style = "height: 200px; resize: none;" })
        </div>
    </div>
    <div class="row" style="padding-bottom: 10px;">
        <div class="col-md-12">
            @Html.LabelFor(x => x.IsSystemRoute)
            @Html.CheckBoxFor(x => x.IsSystemRoute)
        </div>
    </div>
    <div class="row" style="padding-bottom: 10px;">
        <div style="width: 100%; padding: 10px;">
            <div id="map" style="height: 500px; width: 100%;"></div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>
                <i class="fa fa-sort"></i>&nbsp;Obecna trasa<span id="span-current-route-distance"></span>
            </h3>
            <ul id="spots-sortable" style="padding-left: 0; list-style-type: none;"></ul>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <button type="button" class="btn btn-danger btn-md pull-left" onclick="jQuery('#form-delete-route').submit()"><i class="fa fa-trash"></i>&nbsp;Usuń</button>
            <button type="submit" class="btn btn-warning btn-md pull-right"><i class="fa fa-check"></i>&nbsp;Zapisz</button>
        </div>
    </div>
}

@using (Html.BeginForm("Delete/" + Url.RequestContext.RouteData.Values["id"], "Route", FormMethod.Post, new { @id = "form-delete-route" })) { }